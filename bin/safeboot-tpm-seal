#!/bin/bash
# Create a new disk encryption key and add it to the LUKS
# system, as well as seal the key into the TPM.
set -e -o pipefail
die() { echo "$@" >&2 ; exit 1 ; }
warn() { echo "$@" >&2 ; }

DIR="`dirname $0`"
PCRS='sha256:0,2,4,5,7,14'
DEV=/dev/sda3
KEYSLOT=1
HANDLE=0x81000000

# if the TPM2 resource manager is running, talk to it.
# otherwise use a direct connection to the TPM.
if ! pidof tpm2-abrmd > /dev/null ; then
	export TPM2TSSENGINE_TCTI="device:/dev/tpmrm0"
fi

# Use a tmpfs mount instead of just a temp directory so that
# the disk encryption key doesn't touch a persistent disk.
TMP=`mktemp -d`

mount -t tmpfs none "$TMP" \
|| die "Unable to mount temp directory"
chmod 700 "$TMP"

cleanup() {
	umount "$TMP" || die "DANGER: umount $TMP failed"
	rmdir "$TMP"
}

trap cleanup EXIT

dd \
	if=/dev/urandom \
	of="$TMP/key.bin" \
	bs=32 \
	count=1 \
|| die "Unable to generate random key"

# If pre-computed PCRs are known, they can be used here instead
tpm2_pcrread -o "$TMP/pcrs.bin" "$PCRS" \
	>> /tmp/tpm.log \
|| die "Unable to read TPM PCRs"

tpm2_createpolicy \
	--policy-pcr \
	--pcr-list "$PCRS" \
	--pcr "$TMP/pcrs.bin" \
	--policy "$TMP/policy.digest" \
	>> /tmp/tpm.log \
|| die "Unable to create TPM policy"

tpm2_createprimary \
	--key-context "$TMP/primary.context" \
	>> /tmp/tpm.log \
|| die "Unable to create TPM primary object"

# Start a secret session with the TPM
#tpm2_startauthsession \
#	--session "$TMP/session.context" \
#|| die "Unable to start TPM session"
#
#tpm2_policysecret \
#	--session "$TMP/session.context" \
#	--object-context "$TMP/primary.context" \
#|| die "Unable to set secret policy"
#	--parent-auth "$TMP/session.context" \
#	--key-auth $HANDLE \

warn "Sealing secret with TPM"
tpm2_create \
	--parent-context "$TMP/primary.context" \
	--policy "$TMP/policy.digest" \
	--sealing-input "$TMP/key.bin" \
	--public "$TMP/public.bin" \
	--private "$TMP/private.bin" \
	>> /tmp/tpm.log \
|| die "Unable to create TPM key context"

tpm2_load \
	--parent-context "$TMP/primary.context" \
	--public "$TMP/public.bin" \
	--private "$TMP/private.bin" \
	--key-context "$TMP/key.context" \
	>> /tmp/tpm.log \
|| die "Unable to load TPM with key"
	
warn "Installing sealed secret into TPM"
tpm2_evictcontrol \
	--object-context "$HANDLE" \
	>> /tmp/tpm.log \
|| die "Unable to remove old TPM key context $HANDLE"

tpm2_evictcontrol \
	--object-context "$TMP/key.context" \
	>> /tmp/tpm.log \
|| die "Unable to load TPM key context into TPM"

# Verify that the key actually works -- this might break
# if there are different PCRs
warn "Verifying sealed secret"
tpm2_unseal \
	--object-context $HANDLE \
	--auth pcr:"$PCRS" \
	--output "$TMP/key2.bin" \
	>> /tmp/tpm.log \
|| die "Unable to unseal key from TPM"

cmp "$TMP/key.bin" "$TMP/key2.bin" \
|| die "Keys do not match; something failed"

# ask for the disk encryption key
for tries in 1 2 3 fail; do
	read -s -p "Current recovery password: " recovery_key
	echo
	echo -n "$recovery_key" > "$TMP/recovery.key"

	warn "Removing old LUKS TPM key (if it exists)"
	cryptsetup luksKillSlot \
		--key-file "$TMP/recovery.key" \
		"$DEV" $KEYSLOT \
	|| warn "$DEV: Unable to remove old key slot (ignored)"

	warn "Adding new LUKS TPM key"
	cryptsetup luksAddKey \
		--key-file "$TMP/recovery.key" \
		--key-slot $KEYSLOT \
		"$DEV" "$TMP/key.bin" \
	&& break

	warn "$DEV: Unable to add key slot"

	if [ $tries == fail ]; then
		die "Unable to add key"
	fi
done

# check to see if the initramfs hook is installed
#if [ ! -r /etc/initramfs-tools/hooks/tpm-unseal ]; then
	warn "adding initramfs hook"
	cp "$DIR/../initramfs/hooks/tpm-unseal" /etc/initramfs-tools/hooks \
	|| die "/etc/initramfs-tools/hooks: unable to install hook"
#fi

# put the tpm unlock script in /usr/local/bin
# todo: figure out if this can be run from elsewhere
#if [ ! -r /usr/local/bin/safeboot-tpm-unseal ]; then
	warn "copying safeboot-tpm-unseal"
	cp "$DIR/safeboot-tpm-unseal" /usr/local/bin \
	|| die "safeboot-tpm-unseal: unable to install into /usr/local/bin"
#fi

# make sure the crypttab has the unlock script referenced
if ! grep keyscript /etc/crypttab > /dev/null ; then
	warn "adding crypttab unseal script"
	sed -i.orig 's:,discard$:,discard,keyscript=/usr/local/bin/safeboot-tpm-unseal:' /etc/crypttab \
	|| die "/etc/crypttab: unable to add keyscript"

	warn "***** You should update your ramdisk and resign the kernel:"
	warn "sudo update-initramfs -u"
	warn "sudo $DIR/safeboot-signkernel"
fi

