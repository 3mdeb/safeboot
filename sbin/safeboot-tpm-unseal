#!/bin/sh
# This is run in the initramfs context, not in the normal user space.
# It attempts to unseal the key from the TPM based on the PCRS passed
# on the command line using direct access since there is no resource
# manager. 
#
# If successful, PCR14 will be extended to prevent later stages from
# retrieving the decryption key.  The key is stored in a kernel key
# ring, so it should not be accessible to even a root user.
#
# If the unsealing fails, fall back to asking for the user's recovery key.
#

# Default PCRs
PCRS='0,2,5,7,14'
MODE=unknown
HANDLE=0x81000000

# Direct access
export TPM2TSSENGINE_TCTI="device:/dev/tpmrm0"

sha256() { echo -n "$@" | sha256sum | cut -d' ' -f1 ; }
log() { echo >&2 "$@" ; }


for arg in $(cat /proc/cmdline)
do
    case "$arg" in
        tpm.mode=*)
            MODE=${arg#tpm.mode=}
            ;;
        tpm.pcrs=*)
            PCRS=${arg#tpm.pcrs=}
            ;;
        tpm.handle=*)
            HANDLE=${arg#tpm.handle=}
            ;;
        *)
            ;;
    esac
done

log "TPM mode=$MODE pcrs=$PCRS"


/usr/bin/tpm2_pcrread >&2 \
	'sha256:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16'

#
# Extend PCR14 with the boot mode so that recovery
# boots aren't able to access the sealed disk key.
#
/usr/bin/tpm2_pcrextend >&2 14:sha256=`sha256 "$MODE"`


#
# Attempt to unseal, outputing the binary key to stdout
#
if /usr/bin/tpm2_unseal \
	--object-context "$HANDLE" \
	--auth pcr:"sha256:$PCRS" \
; then
	# ensure that a local attacker can't re-read the key from the TPM
	# by extending pcr 14 with "postboot"
	log "TPM disk key unsealed"
	/usr/bin/tpm2_pcrextend >&2 14:sha256=`sha256 postboot`
	exit 0
else
	# the key was not unsealed; log the failure
	# and ask the user for the recovery key
	log "Falling back to user pass phrase"
	/usr/bin/tpm2_pcrextend >&2 14:sha256=`sha256 bootfail`

	/lib/cryptsetup/askpass \
		"TPM Unsealing failed! Enter recovery key for $CRYPTTAB_SOURCE ($CRYPTTAB_NAME): "
fi
